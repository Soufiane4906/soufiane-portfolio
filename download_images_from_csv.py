#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script simplifi√© pour t√©l√©charger les images depuis le fichier CSV
Version sans Selenium - utilise directement le CSV g√©n√©r√©
"""

import os
import csv
import requests
from pathlib import Path
import time

def download_image(url, filepath, name, category):
    """T√©l√©charge une image depuis une URL"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8',
            'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7',
            'Referer': 'https://www.linkedin.com/',
            'Sec-Fetch-Dest': 'image',
            'Sec-Fetch-Mode': 'no-cors',
            'Sec-Fetch-Site': 'same-site'
        }

        response = requests.get(url, headers=headers, timeout=15, stream=True)

        if response.status_code == 200:
            with open(filepath, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            file_size = os.path.getsize(filepath)
            print(f"      ‚úÖ T√©l√©charg√© - {file_size:,} bytes")
            return True
        else:
            print(f"      ‚ùå Erreur HTTP {response.status_code}")
            return False

    except requests.exceptions.RequestException as e:
        print(f"      ‚ùå Erreur r√©seau: {str(e)[:60]}")
        return False
    except Exception as e:
        print(f"      ‚ùå Erreur: {str(e)[:60]}")
        return False

def sanitize_filename(name, max_length=50):
    """Nettoie un nom pour en faire un nom de fichier valide"""
    # Enlever les caract√®res sp√©ciaux
    name = name.replace('Logo de ', '')
    name = name.replace('/', '_')
    name = name.replace('\\', '_')
    name = name.replace(':', '_')
    name = name.replace('*', '_')
    name = name.replace('?', '_')
    name = name.replace('"', '_')
    name = name.replace('<', '_')
    name = name.replace('>', '_')
    name = name.replace('|', '_')
    name = name.replace(' ', '_')

    # Limiter la longueur
    if len(name) > max_length:
        name = name[:max_length]

    return name.strip('_')

def main():
    """Fonction principale"""
    print("‚ïê" * 80)
    print("  üöÄ T√âL√âCHARGEMENT DES IMAGES DEPUIS LE CSV")
    print("‚ïê" * 80)

    # Fichier CSV source
    csv_file = "images_extraites.csv"

    if not Path(csv_file).exists():
        print(f"‚ùå Fichier {csv_file} non trouv√©!")
        print("   Ex√©cutez d'abord: python extract_all_images.py")
        return

    # Cr√©er les dossiers de destination
    output_dir = Path("public/assets/img")
    education_dir = output_dir / "education"
    experience_dir = output_dir / "experience"
    certification_dir = output_dir / "certification"

    for directory in [education_dir, experience_dir, certification_dir]:
        directory.mkdir(parents=True, exist_ok=True)

    print(f"\nüìÅ Dossiers de destination cr√©√©s:")
    print(f"   ‚Ä¢ {education_dir}")
    print(f"   ‚Ä¢ {experience_dir}")
    print(f"   ‚Ä¢ {certification_dir}")

    # Lire le CSV
    print(f"\nüìÑ Lecture du fichier CSV: {csv_file}")

    images = []
    with open(csv_file, 'r', encoding='utf-8-sig') as f:
        reader = csv.DictReader(f)
        images = list(reader)

    print(f"   ‚úì {len(images)} images trouv√©es dans le CSV\n")

    # Statistiques
    stats = {
        'total': len(images),
        'success': 0,
        'failed': 0,
        'skipped': 0,
        'by_category': {}
    }

    # Traquer les URLs d√©j√† t√©l√©charg√©es pour √©viter les doublons
    downloaded_urls = set()

    print("‚ïê" * 80)
    print("  üì• D√âBUT DU T√âL√âCHARGEMENT")
    print("‚ïê" * 80)

    # T√©l√©charger chaque image
    for idx, img in enumerate(images, 1):
        category = img['category']
        alt = img['alt']
        url = img['src']

        # Skip si pas d'URL
        if not url or url == '':
            print(f"\n[{idx}/{len(images)}] ‚ö†Ô∏è  Image sans URL - ignor√©e")
            stats['skipped'] += 1
            continue

        # Skip les doublons
        if url in downloaded_urls:
            print(f"\n[{idx}/{len(images)}] ‚è≠Ô∏è  Doublon d√©tect√© - ignor√©")
            print(f"   üìù {alt}")
            stats['skipped'] += 1
            continue

        # D√©terminer le dossier de destination
        if category == 'EDUCATION':
            dest_dir = education_dir
            prefix = 'edu'
        elif category == 'EXPERIENCE':
            dest_dir = experience_dir
            prefix = 'exp'
        elif category == 'CERTIFICATION':
            dest_dir = certification_dir
            prefix = 'cert'
        else:
            dest_dir = output_dir
            prefix = 'other'

        # Cr√©er le nom de fichier bas√© sur le alt text
        clean_name = sanitize_filename(alt)
        if not clean_name:
            clean_name = f"{prefix}_{idx:03d}"

        # Extension (toujours PNG pour les logos LinkedIn)
        ext = '.png'
        filename = f"{clean_name}{ext}"
        filepath = dest_dir / filename

        # √âviter les collisions de noms
        counter = 1
        while filepath.exists():
            filename = f"{clean_name}_{counter}{ext}"
            filepath = dest_dir / filename
            counter += 1

        # Afficher les informations
        print(f"\n[{idx}/{len(images)}] üì¶ {category}")
        print(f"   üìù {alt}")
        print(f"   üíæ {filename}")
        print(f"   üîó {url[:80]}...")

        # T√©l√©charger l'image
        success = download_image(url, filepath, alt, category)

        if success:
            stats['success'] += 1
            downloaded_urls.add(url)
        else:
            stats['failed'] += 1

        # Mettre √† jour les statistiques par cat√©gorie
        if category not in stats['by_category']:
            stats['by_category'][category] = {'success': 0, 'failed': 0, 'skipped': 0}

        if success:
            stats['by_category'][category]['success'] += 1
        else:
            stats['by_category'][category]['failed'] += 1

        # Petite pause pour ne pas surcharger les serveurs
        time.sleep(0.3)

    # Afficher les statistiques finales
    print("\n" + "‚ïê" * 80)
    print("  üìä STATISTIQUES FINALES")
    print("‚ïê" * 80)
    print(f"\n‚úÖ T√©l√©charg√©s avec succ√®s: {stats['success']}")
    print(f"‚ùå √âchecs: {stats['failed']}")
    print(f"‚è≠Ô∏è  Ignor√©s (doublons/vides): {stats['skipped']}")
    print(f"üìä Total trait√©: {stats['total']}")

    if stats['success'] > 0:
        success_rate = (stats['success'] / (stats['total'] - stats['skipped']) * 100)
        print(f"üìà Taux de r√©ussite: {success_rate:.1f}%")

    print("\nüìã D√©tails par cat√©gorie:")
    for cat, cat_stats in stats['by_category'].items():
        total = cat_stats['success'] + cat_stats['failed']
        print(f"   ‚Ä¢ {cat}: {cat_stats['success']}/{total} r√©ussis")

    print("\n" + "‚ïê" * 80)
    print("  ‚úÖ T√âL√âCHARGEMENT TERMIN√â!")
    print("‚ïê" * 80)
    print(f"\nüìÅ Images sauvegard√©es dans:")
    print(f"   ‚Ä¢ √âducation: {education_dir}")
    print(f"   ‚Ä¢ Exp√©rience: {experience_dir}")
    print(f"   ‚Ä¢ Certifications: {certification_dir}")

    # V√©rifier combien de fichiers ont √©t√© cr√©√©s
    edu_count = len(list(education_dir.glob('*.png')))
    exp_count = len(list(experience_dir.glob('*.png')))
    cert_count = len(list(certification_dir.glob('*.png')))

    print(f"\nüìÇ Fichiers cr√©√©s:")
    print(f"   ‚Ä¢ √âducation: {edu_count} fichiers")
    print(f"   ‚Ä¢ Exp√©rience: {exp_count} fichiers")
    print(f"   ‚Ä¢ Certifications: {cert_count} fichiers")
    print(f"   ‚Ä¢ Total: {edu_count + exp_count + cert_count} fichiers")

if __name__ == '__main__':
    main()
