#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script optimis√© pour t√©l√©charger les images
Combine CSV et t√©l√©chargement asynchrone pour plus de rapidit√©
"""

import os
import csv
import requests
from pathlib import Path
import time
from concurrent.futures import ThreadPoolExecutor, as_completed

def download_image(img_data):
    """T√©l√©charge une image - Version thread-safe"""
    url = img_data['url']
    filepath = img_data['filepath']
    alt = img_data['alt']
    category = img_data['category']
    idx = img_data['idx']
    total = img_data['total']

    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'image/*',
            'Referer': 'https://www.linkedin.com/'
        }

        response = requests.get(url, headers=headers, timeout=10, stream=True)

        if response.status_code == 200:
            with open(filepath, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)

            file_size = os.path.getsize(filepath)
            result = {
                'success': True,
                'idx': idx,
                'total': total,
                'category': category,
                'alt': alt,
                'filename': filepath.name,
                'size': file_size
            }
            return result
        else:
            return {
                'success': False,
                'idx': idx,
                'total': total,
                'category': category,
                'alt': alt,
                'error': f'HTTP {response.status_code}'
            }

    except Exception as e:
        return {
            'success': False,
            'idx': idx,
            'total': total,
            'category': category,
            'alt': alt,
            'error': str(e)[:50]
        }

def sanitize_filename(name, max_length=50):
    """Nettoie un nom pour en faire un nom de fichier valide"""
    name = name.replace('Logo de ', '')
    invalid_chars = ['/', '\\', ':', '*', '?', '"', '<', '>', '|']
    for char in invalid_chars:
        name = name.replace(char, '_')
    name = name.replace(' ', '_')

    if len(name) > max_length:
        name = name[:max_length]

    return name.strip('_')

def main():
    """Fonction principale"""
    print("‚ïê" * 80)
    print("  üöÄ T√âL√âCHARGEMENT RAPIDE DES IMAGES (Multi-threading)")
    print("‚ïê" * 80)

    csv_file = "images_extraites.csv"

    if not Path(csv_file).exists():
        print(f"‚ùå Fichier {csv_file} non trouv√©!")
        return

    # Cr√©er les dossiers
    output_dir = Path("public/assets/img")
    dirs = {
        'EDUCATION': output_dir / "education",
        'EXPERIENCE': output_dir / "experience",
        'CERTIFICATION': output_dir / "certification"
    }

    for directory in dirs.values():
        directory.mkdir(parents=True, exist_ok=True)

    print(f"\nüìÅ Dossiers pr√™ts")

    # Lire le CSV
    with open(csv_file, 'r', encoding='utf-8-sig') as f:
        reader = csv.DictReader(f)
        images = list(reader)

    print(f"üìÑ {len(images)} images √† t√©l√©charger\n")

    # Pr√©parer les t√¢ches (sans doublons)
    tasks = []
    seen_urls = set()

    for idx, img in enumerate(images, 1):
        category = img['category']
        alt = img['alt']
        url = img['src']

        if not url or url in seen_urls:
            continue

        seen_urls.add(url)

        dest_dir = dirs.get(category, output_dir)
        clean_name = sanitize_filename(alt)
        if not clean_name:
            clean_name = f"image_{idx:03d}"

        filename = f"{clean_name}.png"
        filepath = dest_dir / filename

        # √âviter les collisions
        counter = 1
        while filepath.exists():
            filename = f"{clean_name}_{counter}.png"
            filepath = dest_dir / filename
            counter += 1

        tasks.append({
            'idx': idx,
            'total': len(images),
            'url': url,
            'filepath': filepath,
            'alt': alt,
            'category': category
        })

    print(f"üì¶ {len(tasks)} images uniques √† t√©l√©charger")
    print("‚ïê" * 80)

    # Statistiques
    stats = {
        'success': 0,
        'failed': 0,
        'by_category': {}
    }

    # T√©l√©chargement en parall√®le
    max_workers = 5  # Nombre de t√©l√©chargements simultan√©s

    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = {executor.submit(download_image, task): task for task in tasks}

        for future in as_completed(futures):
            result = future.result()

            idx = result['idx']
            total = result['total']
            category = result['category']
            alt = result['alt']

            if result['success']:
                stats['success'] += 1
                print(f"‚úÖ [{idx}/{total}] {category}")
                print(f"   üìù {alt}")
                print(f"   üíæ {result['filename']} ({result['size']:,} bytes)")

                if category not in stats['by_category']:
                    stats['by_category'][category] = {'success': 0, 'failed': 0}
                stats['by_category'][category]['success'] += 1
            else:
                stats['failed'] += 1
                print(f"‚ùå [{idx}/{total}] {category}")
                print(f"   üìù {alt}")
                print(f"   ‚ö†Ô∏è  {result['error']}")

                if category not in stats['by_category']:
                    stats['by_category'][category] = {'success': 0, 'failed': 0}
                stats['by_category'][category]['failed'] += 1

    # R√©sum√© final
    print("\n" + "‚ïê" * 80)
    print("  üìä R√âSUM√â FINAL")
    print("‚ïê" * 80)
    print(f"\n‚úÖ R√©ussis: {stats['success']}")
    print(f"‚ùå √âchou√©s: {stats['failed']}")
    print(f"üìä Total: {len(tasks)}")

    if stats['success'] > 0:
        print(f"üìà Taux de r√©ussite: {(stats['success']/len(tasks)*100):.1f}%")

    print("\nüìã Par cat√©gorie:")
    for cat, cat_stats in stats['by_category'].items():
        total = cat_stats['success'] + cat_stats['failed']
        print(f"   ‚Ä¢ {cat}: {cat_stats['success']}/{total} r√©ussis")

    # V√©rification finale
    print("\nüìÇ Fichiers cr√©√©s:")
    for cat, directory in dirs.items():
        count = len(list(directory.glob('*.png')))
        print(f"   ‚Ä¢ {cat}: {count} fichiers dans {directory.name}/")

    print("\n" + "‚ïê" * 80)
    print("  ‚úÖ TERMIN√â!")
    print("‚ïê" * 80)

if __name__ == '__main__':
    main()
